name: Build and Release SilksongRooms

on:
  push:
    branches: [ '**' ]
  pull_request:
    branches: [ '**' ]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            8.0.x
            7.0.x
            6.0.x

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~\AppData\Local\NuGet\v3-cache
          key: nuget-${{ runner.os }}-${{ hashFiles('**/packages.lock.json', '**/*.csproj') }}
          restore-keys: |
            nuget-${{ runner.os }}-

      - name: Restore
        working-directory: content/SilksongRooms
        run: |
          dotnet restore SilksongRooms.1.csproj -p:game-version=latest -p:UnityVersion=6000.*

      - name: Build (Release)
        working-directory: content/SilksongRooms
        run: |
          dotnet build SilksongRooms.1.csproj -c Release -p:SkipCopyMod=true -p:game-version=latest -p:UnityVersion=6000.* --nologo --no-restore

      - name: Collect artifacts
        shell: pwsh
        run: |
          $out = "${{ github.workspace }}\artifacts"
          New-Item -ItemType Directory -Path $out -Force | Out-Null
          $bin = "content/SilksongRooms/bin/Release"
          # Prefer new assembly name outputs
          $dll = Get-ChildItem $bin -Recurse -Filter "SilkRoomUtils.dll" | Select-Object -First 1
          if (-not $dll) { $dll = Get-ChildItem $bin -Recurse -Filter "SilksongRooms.1.dll" | Select-Object -First 1 }
          if ($dll) { Copy-Item $dll.FullName (Join-Path $out "SilkRoomUtils.dll") -Force }

          $pdb = Get-ChildItem $bin -Recurse -Filter "SilkRoomUtils.pdb" | Select-Object -First 1
          if (-not $pdb) { $pdb = Get-ChildItem $bin -Recurse -Filter "SilksongRooms.1.pdb" | Select-Object -First 1 }
          if ($pdb) { Copy-Item $pdb.FullName (Join-Path $out "SilkRoomUtils.pdb") -Force }

          if (Test-Path "content/SilksongRooms/bin/Publish/SilkRoomUtils.zip") { Copy-Item "content/SilksongRooms/bin/Publish/SilkRoomUtils.zip" $out }
          elseif (Test-Path "content/SilksongRooms/bin/Publish/SilksongRooms.1.zip") { Copy-Item "content/SilksongRooms/bin/Publish/SilksongRooms.1.zip" $out }
          Get-ChildItem $out -Recurse | Format-List FullName

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: SilksongRooms-artifacts
          path: artifacts
          if-no-files-found: error

  release:
    name: Create GitHub Release
    runs-on: windows-latest
    # Release on any push (every commit). Avoid PR events.
    if: github.event_name == 'push'
    needs: [build]
    permissions:
      contents: write

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: SilksongRooms-artifacts
          path: artifacts

      - name: Checkout repo (for README/icon)
        uses: actions/checkout@v4

      - name: Generate random HEX and tag name
        id: meta
        shell: pwsh
        run: |
          # Random 6-digit hex color
          $hex = -join (1..6 | ForEach-Object { '{0:x}' -f (Get-Random -Minimum 0 -Maximum 16) })
          Write-Host "Random HEX color: #$hex"

          # Create a unique tag name for this commit
          $branch = $env:GITHUB_REF_NAME -replace '[^A-Za-z0-9._-]','-'
          $sha7 = $env:GITHUB_SHA.Substring(0,7)
          $run = $env:GITHUB_RUN_NUMBER
          $tag = "auto-$branch-$sha7-$run"
          Write-Host "Tag name: $tag"

          # Publish step outputs for later steps
          $out = $env:GITHUB_OUTPUT
          Add-Content -Path $out -Value "hex_color=$hex"
          Add-Content -Path $out -Value "tag_name=$tag"

      - name: Compose release notes
        id: notes
        env:
          HEX: ${{ steps.meta.outputs.hex_color }}
          TAG: ${{ steps.meta.outputs.tag_name }}
        shell: pwsh
        run: |
          $hex = "$env:HEX"
          $tag = "$env:TAG"
          $nl = "`n"
          $body = @(
            "Automated release for $tag",
            "",
            "Color: #$hex",
            "",
            "![color](https://img.shields.io/badge/color-%23$hex-$hex?style=for-the-badge)",
            "",
            "Artifacts include the DLL, PDB, and optional zip (if produced)."
          ) -join $nl
          Set-Content -Path release-notes.md -Value $body -Encoding UTF8

      - name: Package ZIPs (bin + Thunderstore)
        env:
          HEX: ${{ steps.meta.outputs.hex_color }}
        shell: pwsh
        run: |
          $art = "artifacts"
          $dll = Join-Path $art "SilkRoomUtils.dll"
          $pdb = Join-Path $art "SilkRoomUtils.pdb"

          if (-not (Test-Path $dll)) {
            $foundDll = Get-ChildItem $art -Recurse -Filter *.dll | Select-Object -First 1
            if ($foundDll) {
              Copy-Item $foundDll.FullName $dll -Force
              Write-Host "Recovered DLL from artifacts: $($foundDll.FullName)"
            } else {
              throw "Missing $dll and no other DLL found in artifacts"
            }
          }
          if (-not (Test-Path $pdb)) {
            $foundPdb = Get-ChildItem $art -Recurse -Filter *.pdb | Select-Object -First 1
            if ($foundPdb) {
              Copy-Item $foundPdb.FullName $pdb -Force
              Write-Host "Recovered PDB from artifacts: $($foundPdb.FullName)"
            } else {
              Write-Host "Warning: PDB not found; continuing without it."
            }
          }

          # Create README/icon defaults if missing in repo root
          if (-not (Test-Path "README.md")) {
            $readme = "# SilkRoomUtils`n`nRoom loading utilities for Silksong (BepInEx).`n`nPackaged for Thunderstore."
            Set-Content -Path "README.md" -Value $readme -Encoding UTF8
          }

          if (-not (Test-Path "icon.png")) {
            try {
              Add-Type -AssemblyName System.Drawing
              $bmp = New-Object System.Drawing.Bitmap 256,256
              $g = [System.Drawing.Graphics]::FromImage($bmp)
              $r = [Convert]::ToInt32($env:HEX.Substring(0,2),16)
              $gC = [Convert]::ToInt32($env:HEX.Substring(2,2),16)
              $b = [Convert]::ToInt32($env:HEX.Substring(4,2),16)
              $color = [System.Drawing.Color]::FromArgb(255,$r,$gC,$b)
              $brush = New-Object System.Drawing.SolidBrush $color
              $g.FillRectangle($brush,0,0,256,256)
              $brush.Dispose(); $g.Dispose()
              $bmp.Save("icon.png", [System.Drawing.Imaging.ImageFormat]::Png)
              $bmp.Dispose()
            } catch {
              Write-Host "Failed to generate icon.png automatically: $_"
            }
          }

          # 1) Minimal binary zip
          $binZip = Join-Path $art "SilkRoomUtils-bin.zip"
          $toZip = @($dll)
          if (Test-Path $pdb) { $toZip += $pdb }
          Compress-Archive -Path $toZip -DestinationPath $binZip -Force

          # 2) Thunderstore package zip
          $stage = "ts_package"
          if (Test-Path $stage) { Remove-Item $stage -Recurse -Force }
          New-Item -ItemType Directory -Path $stage | Out-Null
          New-Item -ItemType Directory -Path (Join-Path $stage "BepInEx/plugins/SilkRoomUtils") -Force | Out-Null

          Copy-Item $dll (Join-Path $stage "BepInEx/plugins/SilkRoomUtils/SilkRoomUtils.dll") -Force
          if (Test-Path $pdb) { Copy-Item $pdb (Join-Path $stage "BepInEx/plugins/SilkRoomUtils/SilkRoomUtils.pdb") -Force }

          $version = "0.0.$env:GITHUB_RUN_NUMBER"
          $repoUrl = "https://github.com/${{ github.repository }}"
          $manifest = @{
            name = "SilkRoomUtils"
            version_number = $version
            website_url = $repoUrl
            description = "Room loading utilities for Silksong (BepInEx)."
            dependencies = @()
          } | ConvertTo-Json -Depth 3
          Set-Content -Path (Join-Path $stage "manifest.json") -Value $manifest -Encoding UTF8

          Copy-Item "README.md" (Join-Path $stage "README.md") -Force
          if (Test-Path "icon.png") { Copy-Item "icon.png" (Join-Path $stage "icon.png") -Force }

          $tsZip = Join-Path $art "SilkRoomUtils-Thunderstore.zip"
          Compress-Archive -Path (Join-Path $stage '*') -DestinationPath $tsZip -Force
          Remove-Item $stage -Recurse -Force

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: SilksongRooms.1 ${{ steps.meta.outputs.tag_name }} â€” #${{ steps.meta.outputs.hex_color }}
          tag_name: ${{ steps.meta.outputs.tag_name }}
          body_path: release-notes.md
          files: |
            artifacts/**
